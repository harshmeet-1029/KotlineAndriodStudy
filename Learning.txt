1. Text() -> it is used to display something on the screen it we import it from android.compose.material.text
#Syntax
Text(
    text: String, // OR AnnotatedString for rich text
    modifier: Modifier = Modifier, // Modifier for layout adjustments
    color: Color = LocalContentColor.current, // Text color
    fontSize: TextUnit = TextUnit.Unspecified, // Font size (e.g., 16.sp)
    fontStyle: FontStyle? = null, // Font style (Italic, Normal)
    fontWeight: FontWeight? = null, // Font weight (Bold, Light, etc.)
    fontFamily: FontFamily? = null, // Custom font family
    letterSpacing: TextUnit = TextUnit.Unspecified, // Spacing between letters
    textDecoration: TextDecoration? = null, // Underline, Strikethrough, etc.
    textAlign: TextAlign? = null, // Alignment (Left, Center, Right, Justify)
    lineHeight: TextUnit = TextUnit.Unspecified, // Height of each line
    overflow: TextOverflow = TextOverflow.Clip, // Handling overflow text (Ellipsis, Clip, etc.)
    softWrap: Boolean = true, // Enable/disable text wrapping
    maxLines: Int = Int.MAX_VALUE, // Maximum number of lines
    minLines: Int = 1, // Minimum number of lines
    inlineContent: Map<String, InlineTextContent> = mapOf(), // Custom inline content (e.g., images)
    onTextLayout: (TextLayoutResult) -> Unit = {}, // Callback for layout changes
    style: TextStyle = LocalTextStyle.current // A complete style object
)

==========================================
2. Composable function
Composable functions are the building blocks of Jetpack Compose,
Google's modern UI toolkit for Android.
These functions define the UI in a declarative way,
meaning you describe what the UI should look like,
and Compose takes care of rendering it efficiently
1. we use  @Composable to make it
2. it does nto return any value
3. It must start with Capital letter


#sytanx
@Composable
fun <fun_name>(){
code
}
==========================================
// BY DEFAULT IN JETPACK COMPOSE EVERYTHING IS IN STACK
3. Column:
In Jetpack Compose, Column is a layout composable that arranges its children vertically in a single column.
Column{<Items>}
==========================================

4. How to use font using google
1. Download it and extract it and make everything in lowercase
2. Create the folder name font or anything in ur res folder
3. go to app/src/main/java/com/example/kotlineandriodstudy/ui/theme/Type.kt and create the
new variable and define your font there
Create a Type.kt file inside your ui.theme package (or wherever you manage typography) and define your FontFamily like this:
package com.example.app.ui.theme

import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import com.example.app.R  // Import your app's R file

val WindSong = FontFamily(
    Font(R.font.windsong, FontWeight.Normal),
    Font(R.font.windsong_bold, FontWeight.Bold) // Add different weights if available
)

==========================================
5. Modifiers
1. What Are Modifiers?
    A modifier in Jetpack Compose enhances a composable by adding: ‚úÖ Styling (colors, padding, borders)
    ‚úÖ Layout adjustments (size, alignment, spacing)
    ‚úÖ Interactions (clicks, gestures, animations

 )
 üõ† 2. Why Not Just Add Everything to Text()?
 If Text() had to handle all styles, layout, and interactions, it would become bloated and hard to maintain.
 üîπ It would need too many parameters, making it confusing.
 üîπ You couldn't reuse the same behavior for other composables like Button(), Image(), etc.
 üîπ Separation of concerns: Text() focuses only on rendering text, and Modifier handles how it behaves.

==========================================
6. How to repeat a text
we use .repeat to repeat a text
like
Text("Harsh".repeat(<times>),maxLines = <lines>)
maxLines force it to display the text in two lines only
and it will crop the text of the text and will never dispaly
==========================================

7. How to make text selectable
we use SelectionContainer to make the text selectable
SelectionContainer{
Widgets
}

7.1. How to Disable Selection
we use Disable Selection to make the text selection disable
DisableSelection{

}

==================---Layouts-----========================
-=-=--=-=-=-=---=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=
8. Row //They are not scrollable by default
Row is a layout composable used to arrange elements horizontally in a single line.
NOTE--------------->
Row arranges its children horizontally from left to right. But to control how they are positioned inside the Row, we need:

Arrangement ‚Üí Controls horizontal positioning of children.

Options for Arrangement
Value	                    Effect
Arrangement.Start	        Aligns items to the start (left).
Arrangement.End	            Aligns items to the end (right).
Arrangement.Center	        Aligns items in the center.
Arrangement.SpaceBetween	Puts maximum space between items.
Arrangement.SpaceAround	    Puts equal space around each item.
Arrangement.SpaceEvenly	    Distributes equal space between and around items.

Alignment ‚Üí Controls vertical positioning of children inside the Row.

Options for Alignment
Value	                    Effect
Alignment.Top	            Aligns items to the top.
Alignment.CenterVertically	Aligns items in the vertical center.
Alignment.Bottom	        Aligns items to the bottom.
------------------------------------------
Make the row scrollable we use modifier .horizontalScroll(rememberScrollState())
-=-=--=-=-=-=---=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=

9. Column //They are not scrollable by default
 It is used to arrange the elements Vertically
Make the row scrollable we use modifier .verticalScroll(rememberScrollState())
-=-=--=-=-=-=---=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=

10 LazyRow
It is used to make the thing scrollable only but it loads lazy like the thing which is
visible in the screen will only be loaded others will not
-=-=--=-=-=-=---=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=

11 LazyColumn
It is used to make the thing scrollable only but it loads lazy like the thing which is
visible in the screen will only be loaded others will not

-=-=--=-=-=-=---=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=
12. Box
A Box is a simple layout component in Jetpack Compose that stacks its children on top of each other.
‚úÖ Why Use Box?
‚úî Overlapping elements (like text over an image).
‚úî Positioning child elements freely using Modifier.align().
‚úî Creating UI components like badges, floating buttons, or overlays.

üìå Basic Example of Box
Box(
    modifier = Modifier
        .fillMaxSize()
        .background(Color.LightGray)
) {
    Text(
        text = "Hello Box!",
        fontSize = 24.sp,
        modifier = Modifier.align(Alignment.Center) // Centers the text inside Box
    )
}
üîπ The text is centered inside the Box using align(Alignment.Center).

üéØ Key Properties of Box
Property	Purpose
.align()	Positions a child inside the Box (e.g., Alignment.TopStart).
.fillMaxSize()	Makes the Box take full screen size.
.background()	Sets the background color.
.padding()	Adds padding inside the Box.
üî• Example: Text Over Image
Box {
    Image(
        painter = painterResource(R.drawable.sample_image),
        contentDescription = "Background Image",
        modifier = Modifier.fillMaxSize()
    )
    Text(
        text = "Overlay Text",
        color = Color.White,
        fontSize = 24.sp,
        modifier = Modifier.align(Alignment.BottomCenter) // Places text at bottom
    )
}

==========================================
13. Material Design
Material Design is a UI design system created by Google that defines the look and feel of Android apps.
Jetpack Compose provides Material Design components to help developers create modern, consistent, and responsive UIs

üî• Common Material Components in Jetpack Compose
Component	    Usage

Button()	    Clickable button with ripple effect
TextField()	    Input field for user text
Card()	        A material-styled card container
Scaffold()	    Structure for AppBars, FABs, and drawers
Surface()	    Themed background container
TopAppBar()	    AppBar (Toolbar) for navigation

==========================================
14. Accessing the Image
1. Add the image to the res folder
2. Add the Image(painter = PainterResource(id = R.drawable.<image_name>),
                 contentDescription = <Description>
                 modifier = <Modifier>
                 )

Common Modifiers for Images
Modifier	                            Purpose
.size(100.dp)	                        Sets width & height equally
.width(100.dp).height(150.dp)	        Custom width & height
.fillMaxWidth()             	        Expands to full width
.clip(RoundedCornerShape(10.dp))	    Rounds corners
.border(2.dp, Color.Black)	            Adds a border
.background(Color.Gray)	                Sets background color
.padding(8.dp)	                        Adds space around

==========================================
15. Accessing the Image from network
1. we need to install the plugin for that we need to to the gradle which is in app/build.gradle.kts
2. Add the dependency in the dependencies obj

How can i add that implementation(io.coil-kt:coil-compose:2.5.0)

ChatGPT said:
You're using Version Catalogs (libs.XXX) for dependencies, but you're trying to add coil-compose using a traditional method.

To fix this, you have two options:

Option 1: Add it to libs.versions.toml (Recommended)
Since you're using libs.XXX, you should add coil-compose inside gradle/libs.versions.toml:

1Ô∏è‚É£ Open gradle/libs.versions.toml
2Ô∏è‚É£ Add the Coil dependency under [versions] and [libraries]:

[versions]
coil = "2.5.0" # Add this version if not present

[libraries]
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
3Ô∏è‚É£ Now, update dependencies in build.gradle.kts like this:

implementation(libs.coil.compose)


3.  Use rememberAsyncImagePainter and add the link there

4. If the app crash while using this then add internet permissions in the manifest files (app/src/main/AndroidManifest.xml)

==========================================
16. Using Icons
1.First we need to use the Icon tag
Icon(
<add the icon here >
)

==========================================
17. Card
 Cards are like div in web development but follow Material Design principles! üöÄ
 A Card in Jetpack Compose is a container component that follows Material Design principles. It is used to group content, add elevation (shadow), and create a structured UI.

Card(
    modifier = Modifier,
    shape = RoundedCornerShape(10.dp),
    colors = CardDefaults.cardColors(containerColor = Color.White),
    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
    border = BorderStroke(2.dp, Color.Black),
    onClick = { /* Handle Click */ },
    content = { /* Content inside card */ }
)


üìå List of Card Properties
Property	  Description	                                        Example
modifier	  Used to set size, padding, margin, etc.	            modifier = Modifier.padding(10.dp).fillMaxWidth()
shape	      Defines the shape of the card (Rounded, Cut, etc.)	shape = RoundedCornerShape(16.dp)
colors	      Sets background and content colors	                colors = CardDefaults.cardColors(containerColor = Color.Red)
elevation	  Adds shadow effect	                                elevation = CardDefaults.cardElevation(6.dp)
border	      Adds a border to the card	                            border = BorderStroke(2.dp, Color.Black)
onClick	      Makes the card clickable	                            onClick = { Log.d("Click", "Card Clicked") }
content	      Defines the UI inside the card	                    content = { Text("Hello") }
==========================================
18. Spacer
it is used to give a space in middle
Spacer(modifier = Modifier.height(100.dp)

==========================================
19. How to create state in kotlin

A stateful component means it remembers values and updates itself when needed.
You use remember and mutableStateOf() to create a state.
  var count by remember { mutableStateOf(0) } // üîπ State: It remembers the count value

==========================================

20. what is state hoisting
State hoisting is a design pattern in Jetpack Compose where
we move (hoist) the state from a composable function to its parent.
This makes the state more reusable, testable, and manageable.

üìå When to Use State Hoisting?
When multiple components need access to the same state.
When the parent needs control over the child‚Äôs behavior.
When we want better reusability and testability.

==========================================
üõ† Difference Between Modifier.padding() & contentPadding

Feature 	Modifier.padding()	        contentPadding
Works on	Any composable	            Specific composable (Scaffold, LazyColumn, etc.)
Affects	    Outer space (margin)	    Inner space (inside content)
Example	    Modifier.padding(16.dp)	    contentPadding = PaddingValues(16.dp)
==========================================

21. Button
Button is used to preform any action when clicked on it
Button(onClick = {}){
<Text need to go inside the button>
}
}